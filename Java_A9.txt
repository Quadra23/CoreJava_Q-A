Q1.What is Spring Framework?
Ans-Spring Framework: Spring Framework is an open-source Java framework that provides comprehensive infrastructure support for developing enterprise-level Java applications. It aims to simplify Java development by offering features like dependency injection, aspect-oriented programming, declarative transaction management, and more.

Q2.What are the features of Spring Framework?
Ans- Features of Spring Framework:

Dependency Injection (DI): Helps manage object dependencies by providing loose coupling and promoting modular design.
Aspect-Oriented Programming (AOP): Enables separation of cross-cutting concerns from the core business logic.
Declarative Transaction Management: Simplifies database transactions by allowing transactional behavior to be defined using annotations or XML configuration.
Spring MVC: Provides a robust model-view-controller framework for building web applications.
Integration with ORM frameworks: Offers seamless integration with popular Object-Relational Mapping (ORM) frameworks like Hibernate, JPA, etc.
Spring Security: Provides a powerful security framework for securing Java applications.
Testability: Supports unit testing with frameworks like JUnit and provides features for integration testing.

Q3.What is a Spring configuration file?
Ans- Spring configuration file: A Spring configuration file, typically named applicationContext.xml, is an XML-based file that defines the configuration and settings for a Spring application. It contains bean definitions, dependencies, aspect configurations, database connection details, and other Spring-specific configurations required for the application.

Q4.What do you mean by IoC Container?
Ans-  IoC Container: Inversion of Control (IoC) Container is a core component of the Spring Framework. It manages the creation, configuration, and lifecycle of objects (beans) in an application. It reduces the dependency between components by controlling the instantiation and injection of dependencies, following the principle of dependency inversion.

Q5.What do you understand by Dependency Injection?
Ans- Dependency Injection: Dependency Injection (DI) is a design pattern used in Spring to manage object dependencies. It allows objects to be loosely coupled by providing their dependencies externally. Instead of creating dependencies within an object, they are injected from external sources, making the code more modular, testable, and maintainable.

Q6.Explain the difference between constructor and setter injection?
Ans-Difference between constructor and setter injection:

Constructor Injection: Dependencies are provided through a constructor when creating an object. It enforces the mandatory injection of dependencies during object creation and promotes immutability.
Setter Injection: Dependencies are set using setter methods after object creation. It allows optional dependencies and provides flexibility to modify dependencies at runtime.

Q7.What are Spring Beans?
Ans- Spring Beans: Spring Beans are the objects managed by the Spring IoC container. They are defined in the Spring configuration file and represent various components of the application. Spring Beans are instantiated, configured, and managed by the IoC container, providing features like dependency injection, lifecycle management, and more.

Q8.What are the bean scopes available in Spring?
Ans-  Bean Scopes in Spring: Spring provides several bean scopes that define the lifecycle and visibility of beans:

Singleton: A single instance of the bean is created and shared across the application.
Prototype: A new instance of the bean is created every time it is requested.
Request: A new instance of the bean is created for each HTTP request (web applications only).
Session: A new instance of the bean is created for each user session (web applications only).
Global Session: A new instance of the bean is created for each global HTTP session (portlet applications only).

Q9.What is Autowiring and name the different modes of it?
Ans- Autowiring in Spring: Autowiring is a feature of Spring that automatically injects dependencies into a bean. It removes the need for explicit bean wiring in the configuration file by allowing Spring to determine and inject the required dependencies based on specified autowiring modes. The different modes of autowiring are byName, byType, constructor, and autodetect.

Q10.Explain Bean life cycle in Spring Bean Factory Container.
Ans-Bean Life Cycle in Spring Bean Factory Container: The life cycle of a Spring bean includes the following phases:

Instantiation: The bean is created by invoking the bean's constructor or factory method.
Population of Dependencies: The dependencies of the bean are injected either through constructor injection or setter injection.
Initialization: Any initialization logic defined in the bean, such as implementing the InitializingBean interface or specifying init-method in the configuration file, is executed.
Usage: The bean is ready for use and can be accessed by other components.
Destruction: If specified, the bean's destruction logic, such as implementing the DisposableBean interface or specifying destroy-method in the configuration file, is executed when the bean is no longer needed.

